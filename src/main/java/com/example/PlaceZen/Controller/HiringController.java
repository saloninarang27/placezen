package com.example.PlaceZen.Controller;

import com.example.PlaceZen.Module.DriveStatus;
import com.example.PlaceZen.Module.Hiring;
import com.example.PlaceZen.Module.Status;
import com.example.PlaceZen.Repository.HiringRepository;
import com.example.PlaceZen.Repository.StatusRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.time.LocalDate;
import java.util.*;

@RestController
@RequestMapping("/Hiring")
@CrossOrigin
public class HiringController {
    @Autowired
    private HiringRepository hiringRepository;

    @Autowired
    private  StatusRepository statusRepository;


    @PostMapping("/add")
    public ResponseEntity<Map<String, Object>> addHiring(
            @RequestParam("company") String Company,
            @RequestParam("role") String Role,
            @RequestParam("cgpa") float Cgpa,
            @RequestParam("CTC") Integer CTC,
            @RequestParam("backlog") int Backlogs,
            @RequestParam("session") int Session,
            @RequestParam("semester") int Semester,
            @RequestParam("branch") String Branch,
            @RequestParam("desciption") String Description,
            @RequestParam("Location") String location,
            @RequestParam("Date1") String date1,
            @RequestParam("Date2") String date2) throws IOException {

        Hiring hiring = new Hiring(Company, Role, Cgpa, CTC, Backlogs, Session, Semester, Branch, Description, location, date1, date2);
        Hiring savedHiring = hiringRepository.save(hiring);

        // Prepare the response with the autogenerated ID
//        Map<String, Object> response = new HashMap<>();
//        response.put("message", "Added successfully");
//        response.put("id", savedHiring.getJobId());
//        System.out.println(response);

//        return ResponseEntity.ok(response);
        return ResponseEntity.ok()
                .contentType(MediaType.APPLICATION_JSON)
                .body(Map.of("message", "Added successfully", "id", savedHiring.getJobId()));

    }

    @GetMapping("/get")
    public List<DriveStatus> thisthat(){
//      return (List<Hiring>) hiringRepository.findAll();

        List<Hiring> hirings= (List<Hiring>) hiringRepository.findAll();
//        return hirings;
        List<Hiring> hr=new ArrayList<>();
        List<DriveStatus> driveStatuses=new ArrayList<>();
        List<Status> statuses= (List<Status>) statusRepository.findAll();
        for(int i=0;i<hirings.size();i++)
        {
//            String date1= (hirings.get(i).getEndDate());
//            LocalDate date= LocalDate.parse(date1);
//            LocalDate now = LocalDate.now();
//            if(( date.isAfter(now) || date.isEqual(now) )){
//                hr.add(hirings.get(i));


             for(int j=0;j<statuses.size();j++)
             {
                 if(hirings.get(i).getJobId()==statuses.get(j).getJobId())
                 {
                     DriveStatus driveStatus=new DriveStatus(hirings.get(i).getJobId(),hirings.get(i).getCompanyName(),hirings.get(i).getRole(),hirings.get(i).getLocation(),hirings.get(i).getCTC(),statuses.get(j).getCurr_status());
                     driveStatuses.add(driveStatus);
                 }
             }


//            }
        }
       return driveStatuses;
    }

    @GetMapping("/gett")
    public  List<Hiring> thisthat2()
    {
        return (List<Hiring>) hiringRepository.findAll();

    }
    @GetMapping("/fetch/{Id}")
    public Optional<Hiring> fetching(@PathVariable("Id")Integer id){

        return hiringRepository.findById(id);
    }

    @GetMapping("/count")
    public Integer findnumber()
    {
        List<Hiring> hire= new ArrayList<>();
        hire= (List<Hiring>) hiringRepository.findAll();
        return hire.size();
    }

}
